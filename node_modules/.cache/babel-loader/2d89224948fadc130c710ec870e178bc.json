{"ast":null,"code":"var _jsxFileName = \"/home/lakshmi/Documents/react/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axios';\nimport React, { useState, useEffect } from 'react';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      const result = await axios.get(fetchUrl);\n      setMovies(result.data.results);\n      return result;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || '').then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && 'row_posterLarge'}`,\n        src: `${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"XtMThy8QKqU\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/lakshmi/Documents/react/netflix-clone/src/Row.js"],"names":["axios","React","useState","useEffect","YouTube","movieTrailer","baseURL","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","result","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAkBC,EAAAA;AAAlB,CAAb,EAA6C;AAAA;;AACzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,SAAf,GAA2B;AACvB,YAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAUR,QAAV,CAArB;AACAG,MAAAA,SAAS,CAACI,MAAM,CAACE,IAAP,CAAYC,OAAb,CAAT;AACA,aAAOH,MAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AASAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AAEA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAC;AADD;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIf,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAGK;AACDT,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACKC,IADL,CACWC,GAAD,IAAO;AACT,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACArB,QAAAA,aAAa,CAACkB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb;AACP,OAJD,EAIGmB,KAJH,CAIUC,KAAD,IAAS;AACdjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACH,OAND;AAOH;AACJ,GAbD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK7B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACMG,MAAM,CAAC2B,GAAP,CAAWV,KAAK,iBACd;AAEI,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAF5B;AAGI,QAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,iBAAkB,EAH7D;AAII,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,UAAU,GAACkB,KAAK,CAACW,WAAP,GAAmBX,KAAK,CAACY,aAAc,EAJvE;AAKI,QAAA,GAAG,EAAEZ,KAAK,CAACC;AALf,SACSD,KAAK,CAACa,EADf;AAAA;AAAA;AAAA;AAAA,cADF;AADN;AAAA;AAAA;AAAA;AAAA,YAFJ,eAeI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAEnB;AAArC;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAvDQf,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import axios from './axios'\nimport React, { useState, useEffect } from 'react'\nimport './Row.css'\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer'\n\nconst baseURL = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({ title, fetchUrl,isLargeRow }) {\n    const [movies, setMovies] = useState([])\n    const [trailerUrl, setTrailerUrl] = useState('')\n    useEffect(() => {\n        async function fetchData() {\n            const result = await axios.get(fetchUrl);\n            setMovies(result.data.results);\n            return result;\n        }\n        fetchData();\n    }, [fetchUrl])\n\n    console.log(movies)\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            autoplay:1,\n        },\n    }\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('')\n        }\n        else {\n            movieTrailer(movie?.name || '')\n                .then((url)=>{\n                    const urlParams = new URLSearchParams(new URL(url).search)\n                    setTrailerUrl(urlParams.get('v'))\n            }).catch((error)=>{\n                console.log(error)\n            })\n        }\n    }\n    return (\n        <div className='row'>\n            <h2>{title}</h2>\n            <div className='row_posters'>\n                { movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={()=>handleClick(movie)}\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\n                        src={`${baseURL}${isLargeRow?movie.poster_path:movie.backdrop_path}`} \n                        alt={movie.name}\n                    />\n                 ))} \n\n            </div>\n            {/* {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} */}\n            <YouTube videoId='XtMThy8QKqU' opts={opts} />\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}